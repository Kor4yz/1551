import carla
import psutil
import csv
import time
import pynvml
import socket
import random

SERVER_IP = "127.0.0.1"
NUM_VEHICLES = random.randint(10, 30)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω
LOG_FILE = "client_metrics.csv"
pynvml.nvmlInit()
hostname = socket.gethostname()

def get_metrics():
    """ –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ """
    cpu = psutil.cpu_percent()
    ram = psutil.virtual_memory().percent
    net = psutil.net_io_counters().bytes_sent + psutil.net_io_counters().bytes_recv
    gpu_handle = pynvml.nvmlDeviceGetHandleByIndex(0)
    gpu_usage = pynvml.nvmlDeviceGetUtilizationRates(gpu_handle).gpu
    gpu_mem = pynvml.nvmlDeviceGetMemoryInfo(gpu_handle).used / (1024 * 1024)
    return cpu, ram, net, gpu_usage, gpu_mem

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
client = carla.Client(SERVER_IP, 2000)
client.set_timeout(10.0)

# –ß–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç load_balancer.py
try:
    with open("client_command.txt", "r") as f:
        extra_vehicles = int(f.read().strip())
        NUM_VEHICLES += extra_vehicles
except:
    pass

NUM_VEHICLES = min(NUM_VEHICLES, 30)


# –°–ø–∞–≤–Ω –º–∞—à–∏–Ω
world = client.get_world()
blueprint_library = world.get_blueprint_library()
spawn_points = world.get_map().get_spawn_points()

vehicles = []
for i in range(NUM_VEHICLES):
    vehicle_bp = random.choice(blueprint_library.filter('vehicle.*'))
    spawn_point = random.choice(spawn_points)
    vehicle = world.try_spawn_actor(vehicle_bp, spawn_point)
    if vehicle:
        vehicle.set_autopilot(True)
        vehicles.append(vehicle)

print(f"üöó –ó–∞–ø—É—â–µ–Ω–æ {len(vehicles)} –º–∞—à–∏–Ω")

# –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
with open(LOG_FILE, "w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(["Time", "Hostname", "Vehicles", "CPU (%)", "RAM (%)", "Net (bytes)", "GPU (%)", "GPU Mem (MB)"])

# –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
for _ in range(60):
    with open(LOG_FILE, "a", newline="") as file:
        writer = csv.writer(file)
        cpu, ram, net, gpu, gpu_mem = get_metrics()
        writer.writerow([time.time(), hostname, len(vehicles), cpu, ram, net, gpu, gpu_mem])
    time.sleep(1)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
print("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç...")
for vehicle in vehicles:
    if vehicle.is_alive:
        vehicle.destroy()
        print(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ –º–∞—à–∏–Ω–∞ {vehicle.id}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –º–∞—à–∏–Ω—ã –æ—Å—Ç–∞–ª–∏—Å—å
spawned_vehicles = world.get_actors().filter('vehicle.*')
for vehicle in spawned_vehicles:
    vehicle.destroy()
    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã {vehicle.id}")

print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")